scalar DateTime
input datetimeOrderBy {
  date: Sort
}

enum Sort {
  asc
  desc
}

schema {
  query: Query
  mutation: Mutation
}

type User {
  id: ID!
  email: String!
  username: String!
  password: String!
  ownBooks: [Book!]!
  sellTransactions: [Transaction!]!
  buyTransactions: [Transaction!]!
}

type Book {
  id: ID!
#   title: String!
    volumeIdGG: String
  dateCreated: DateTime!
  dateForSale: DateTime
  price: Float
  forSale: Boolean
#   isbn: String
  ownedBy: User
  transactions: [Transaction!]!
}

type Transaction {
  id: ID!
  date: DateTime!
  product: Book!
  seller: User!
  buyer: User!
}

type AuthPayload {
  token: String
  user: User
}

type Query {
  # sellingBooks(isbn: Float): [Book!]!
  searchForSaleBook(volumeIdGG: String): [Book!]!
  user(username: String): User!
  myBookShelf(take:Int, cursorId:Int): FeedConnection! #My not for sale books
  myStoreShelf(take:Int,cursorId:Int): FeedConnection! #My for sale books
  feed(take: Int,cursorId:Int): FeedConnection!
  allTransactions:[Transaction!]!
}

type FeedConnection{
    cursorId:Int
    results:[Book!]!
    isNotEmpty:Boolean!
}

type Mutation {
  signup(email: String!, username: String!, password: String!): AuthPayload
  login(email: String!, password: String): AuthPayload
  createNewBook(volumeIdGG: String!): Book!
  sellExistBook(bookId: ID!, price: Float!): Book!  
  sellNewBook(volumeIdGG: String!, price: Float!): Book!
  buy(bookId: ID!): Transaction!
  changePassword(password: String!, newPassword: String!): AuthPayload
  updateUserInfo(username: String): User!
  unsell(bookId:ID!): Book!
  deleteBook(bookId:ID!): Book!
}
